{"version":3,"sources":["apps/Focus/ListSection.tsx","apps/Focus/ListItem.tsx","apps/Focus/List.tsx","apps/Focus/Home.tsx","apps/Focus/index.tsx"],"names":["ListSection","memo","item","color","useColor","View","style","alignItems","borderTopColor","secondary","borderTopWidth","flexDirection","justifyContent","marginTop","config","padding","title","dayOfMonth","type","month","dayOfWeek","ListItem","showSection","onItemPress","currentItem","future","id","Date","now","iconColor","success","action","onPress","useCallback","borderColor","primary","background","borderLeftWidth","flex","disabled","height","paddingHorizontal","paddingVertical","width","name","size","paddingRight","hour","zone","ellipsizeMode","numberOfLines","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","List","onEndReached","onEndReachedThreshold","useState","loading","setLoading","styles","StyleSheet","create","list","opacity","position","onLoad","setTimeout","useEffect","renderItem","FlatList","data","initialNumToRender","initialScrollIndex","inverted","keyboardShouldPersistTaps","ActivityIndicator","editItem","visible","Home","modalItemEdit","setModalItemEdit","modalProfile","modalLogin","setItems","onLeftPress","useAdminNavBack","generateMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","handleItemPress","handleLoad","handleModalEditBackgroundPress","state","border","duration","onBackgroundPress","showOverlay","testID","noHeader","headerShown","Stack","createStackNavigator","Navigator","screenOptions","Screen","component"],"mappings":"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","file":"static/js/14.cec29467.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Text} from '../../components';\nimport {useColor} from '../../hooks';\nimport {config} from '../../utils';\nimport {Item} from './types';\n\ninterface Props {\n  item: Item;\n}\n\nexport const ListSection = memo(function ListSection({item}: Props) {\n  const color = useColor();\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        borderTopColor: color.secondary,\n        borderTopWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        marginTop: config.padding(2),\n        padding: config.padding(2),\n      }}>\n      <Text title={item.dayOfMonth} type=\"h4\" />\n      <Text title={` ${item.month}, ${item.dayOfWeek}`} type=\"overline\" />\n    </View>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {View} from 'react-native';\nimport {Icon, Text, TouchableOpacity} from '../../components';\nimport {useColor} from '../../hooks';\nimport {config} from '../../utils';\nimport {ListSection} from './ListSection';\nimport {Item} from './types';\n\ninterface Props {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n  onItemPress(item: Item): void;\n}\n\nexport const ListItem = memo(function ListItem({\n  showSection,\n  item,\n  onItemPress,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const future = item.id > Date.now();\n  const iconColor = future ? color.secondary : color.success;\n  const title = currentItem ? 'current' : future ? 'future' : item.action;\n\n  const onPress = useCallback(() => onItemPress(item), [item, onItemPress]);\n\n  return (\n    <View\n      style={{\n        borderColor: currentItem ? color.primary : color.background,\n        borderLeftWidth: config.padding(1),\n        flex: 1,\n      }}>\n      <TouchableOpacity\n        disabled={future}\n        onPress={onPress}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          height: config.padding(10),\n          paddingHorizontal: config.padding(4),\n          paddingVertical: config.padding(2),\n        }}>\n        <View\n          style={{\n            flexDirection: 'row',\n            width: config.padding(20),\n          }}>\n          <Icon\n            color={iconColor}\n            name={future ? 'cancel' : 'checkbox-blank-circle'}\n            size={14}\n            style={{paddingRight: config.padding(1)}}\n          />\n          <Text title={`${item.hour} ${item.zone}`} />\n        </View>\n        <Text\n          ellipsizeMode=\"tail\"\n          numberOfLines={1}\n          style={{\n            color: color.secondary,\n            flex: 1,\n          }}\n          title={title}\n          type=\"body1\"\n        />\n      </TouchableOpacity>\n      {showSection && <ListSection item={item} />}\n    </View>\n  );\n});\n","import dayjs from 'dayjs';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {\n  ActivityIndicator,\n  FlatList,\n  ListRenderItem,\n  StyleSheet,\n} from 'react-native';\nimport {config} from '../../utils';\nimport {ListItem} from './ListItem';\nimport {Item} from './types';\n\ninterface Props {\n  items: Item[];\n  onEndReached(): void;\n  onEndReachedThreshold: number;\n  onItemPress(item: Item): void;\n}\n\nconst itemHeight = config.padding(10);\n\nconst initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nconst getItemLayout = (_: Item[] | null | undefined, index: number) => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nconst getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  const between = item.id > before && item.id < after;\n  return between;\n};\n\nconst getFirstItemOfDay = (index: number, item: Item, items: Item[]) =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nconst keyExtractor = (item: Item) => String(item.id);\n\nexport const List = memo(\n  ({items, onItemPress, onEndReached, onEndReachedThreshold}: Props) => {\n    const [loading, setLoading] = useState(true);\n    const styles = StyleSheet.create({\n      list: {\n        opacity: loading ? 0 : 1,\n      },\n      loading: {\n        height: '100%',\n        position: 'absolute',\n        width: '100%',\n      },\n    });\n\n    const onLoad = useCallback(() => {\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    }, []);\n\n    useEffect(() => onLoad(), [onLoad]);\n\n    const renderItem = useCallback<ListRenderItem<Item>>(\n      ({item, index}) => (\n        <ListItem\n          currentItem={getCurrentItem(item)}\n          item={item}\n          onItemPress={onItemPress}\n          showSection={getFirstItemOfDay(index, item, items)}\n        />\n      ),\n      [items, onItemPress],\n    );\n\n    return (\n      <>\n        <FlatList\n          data={items}\n          getItemLayout={getItemLayout}\n          initialNumToRender={0}\n          initialScrollIndex={initialIndex}\n          inverted\n          keyExtractor={keyExtractor}\n          keyboardShouldPersistTaps=\"handled\"\n          onEndReached={onEndReached}\n          onEndReachedThreshold={onEndReachedThreshold}\n          renderItem={renderItem}\n          style={styles.list}\n        />\n        {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n      </>\n    );\n  },\n);\n","import dayjs from 'dayjs';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {Modal, Screen, Text} from '../../components';\nimport {useAdminNavBack} from '../../hooks';\nimport {List} from './List';\nimport {Item} from './types';\n\n// TODO: flatlist on web\n// TODO: rename item.action to item.title\n// TODO: fix refresh scroll jitter\n// TODO: re-rendering everything because dialog is same level as list\n\nconst infiniteScrollRegeneration = 100;\nconst editItem: {visible: boolean; item: Item | null} = {\n  visible: false,\n  item: null,\n};\n\nexport const Home = memo(function Home() {\n  const [modalItemEdit, setModalItemEdit] = useState(editItem);\n  const [modalProfile] = useState(false);\n  const [modalLogin] = useState(false);\n  const [items, setItems] = useState<Item[]>([]);\n  const {onLeftPress} = useAdminNavBack();\n\n  const generateMoreItems = useCallback(() => {\n    const group = [...items];\n    for (let i = 0; i < infiniteScrollRegeneration; i++) {\n      const lastItem =\n        group.length === 0\n          ? dayjs().startOf('day').add(2, 'day').valueOf()\n          : group[group.length - 1].id;\n      const next = dayjs(lastItem).subtract(1, 'hour');\n      const id = next.valueOf();\n      group.push({\n        action: String(Math.random()) + String(Math.random()),\n        dayOfMonth: next.format('D'),\n        dayOfWeek: next.format('ddd'),\n        hour: next.format('h'),\n        id,\n        month: next.format('MMM'),\n        zone: next.format('a'),\n      });\n    }\n    setItems(group);\n  }, [items]);\n\n  const handleItemPress = useCallback((item: Item) => {\n    setModalItemEdit({visible: true, item});\n  }, []);\n\n  const handleLoad = useCallback(() => {\n    if (items.length > 0) return;\n\n    generateMoreItems();\n  }, [generateMoreItems, items.length]);\n\n  const handleModalEditBackgroundPress = useCallback(() => {\n    setModalItemEdit(state => ({...state, visible: false}));\n  }, []);\n\n  useEffect(() => handleLoad(), [handleLoad]);\n\n  return (\n    <>\n      <Screen border onLeftPress={onLeftPress} title=\"Focus\">\n        {items.length > 0 && (\n          <List\n            items={items}\n            onEndReached={generateMoreItems}\n            onEndReachedThreshold={0.5}\n            onItemPress={handleItemPress}\n          />\n        )}\n      </Screen>\n      {modalItemEdit.visible && (\n        <Modal\n          duration={2000}\n          onBackgroundPress={handleModalEditBackgroundPress}\n          showOverlay\n          testID=\"editItem\">\n          <Text title={modalItemEdit.item?.action || 'empty'} />\n        </Modal>\n      )}\n      {modalProfile && (\n        <Modal\n          onBackgroundPress={handleModalEditBackgroundPress}\n          showOverlay\n          testID=\"editItem\">\n          <Text title=\"hello\" />\n        </Modal>\n      )}\n      {modalLogin && (\n        <Modal\n          onBackgroundPress={handleModalEditBackgroundPress}\n          showOverlay\n          testID=\"login\">\n          <Text title=\"hello\" />\n        </Modal>\n      )}\n    </>\n  );\n});\n","import React, {memo} from 'react';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {Home} from './Home';\n\nconst noHeader = {headerShown: false};\nconst Stack = createStackNavigator();\n\nexport default memo(function Focus() {\n  return (\n    <Stack.Navigator screenOptions={noHeader}>\n      <Stack.Screen component={Home} name=\"home\" />\n    </Stack.Navigator>\n  );\n});\n"],"sourceRoot":""}