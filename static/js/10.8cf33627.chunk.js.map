{"version":3,"sources":["apps/Arcade/Archero/index.tsx","apps/Arcade/FlappyBird/index.tsx","apps/Arcade/types.ts","apps/Arcade/Landing/index.tsx","apps/Arcade/PapiJump/index.tsx","apps/Arcade/Snake/index.web.tsx","apps/Arcade/TicTacToe/utils.ts","apps/Arcade/TicTacToe/index.tsx","apps/Arcade/index.tsx"],"names":["charSize","getLimit","value","limit","getBounds","size","Archero","memo","color","useColor","goBack","useNavigation","useNativeDriver","useDriver","timer","useRef","interval","gesture","x0","y0","dx","dy","window","useRootSelector","state","dimension","useState","width","height","dimensions","setDimensions","joystickSize","joystickCenter","thumbSize","initialJoystickLoc","x","y","initialCharLoc","initialThumbLoc","characterValueXY","joystick","Animated","ValueXY","thumb","character","addListener","panGesture","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderStart","_","g","current","onUpdate","onPanResponderMove","onPanResponderRelease","setInterval","clearInterval","spring","toValue","start","offset","offset2","moveJoystick","vx","vy","moveCharacter","angle","Math","atan2","dz","sqrt","pow","z","sin","cos","moveThumb","onLayout","useCallback","event","layout","nativeEvent","navBack","onLeftPress","title","View","style","flex","backgroundColor","success","panHandlers","getLayout","brand","justifyContent","alignItems","borderRadius","overlay","colorWithOpacity","Bird","warning","Pillar","location","direction","useEffect","onPress","onTouchStart","FlappyBird","surface","arcadeScreens","Landing","navigate","useAdminNavBack","screen","map","Button","key","Papi","dropShadow","useDropShadow","timing","duration","easing","Easing","bounce","PapiJump","styles","StyleSheet","container","primary","Snake","dfs","m","d","i","j","t","c","length","val","max","getInitialState","boardSize","board","row","push","turn","winner","TicTacToe","game","setGame","smallest","getSmallestDimension","landscape","getLandscapeOrientation","buttonTitle","turnTitle","onButtonPress","onCellPress","p","nextValue","updatedBoard","v","copy","getUpdatedBoard","didWin","col","dRow","dCol","getWinner","flexDirection","disabled","background","borderWidth","borderColor","n","type","noHeader","headerShown","Stack","createStackNavigator","Navigator","screenOptions","Screen","component","name"],"mappings":"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","file":"static/js/10.8cf33627.chunk.js","sourcesContent":["import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useRef, useState} from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  PanResponder,\n  PanResponderInstance,\n  View,\n} from 'react-native';\nimport {Screen} from '../../../components';\nimport {useColor, useDriver} from '../../../hooks';\nimport {colorWithOpacity, useRootSelector} from '../../../utils';\n\nconst charSize = 50;\nconst charSpeed = 40;\nconst fps = 1000 / 60;\n\nconst getLimit = (value: number, limit: number) =>\n  value > limit ? limit : value < -limit ? -limit : value;\nconst getBounds = (value: number, limit: number, size: number) =>\n  value > limit - size ? limit - size : value < 0 ? 0 : value;\n\nexport const Archero = memo(function Archero() {\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const useNativeDriver = useDriver();\n  const timer = useRef(false);\n  const interval = useRef<number | null>(null);\n  const gesture = useRef({x0: 0, y0: 0, dx: 0, dy: 0});\n  const window = useRootSelector(state => state.dimension.window);\n  const [dimensions, setDimensions] = useState({width: 1000, height: 1000});\n  const {width, height} = dimensions;\n  const smallest = width > height ? height : width;\n  const joystickSize = smallest / 3;\n  const joystickCenter = joystickSize / 2;\n  const thumbSize = joystickSize / 3;\n  const initialJoystickLoc = {\n    x: width / 2 - joystickCenter,\n    y: height - joystickSize - 75,\n  };\n  const initialCharLoc = {\n    x: width / 2 - charSize / 2,\n    y: height / 2 - charSize / 2,\n  };\n  const initialThumbLoc = {x: 0, y: 0};\n  let characterValueXY = initialCharLoc;\n  const joystick: Animated.ValueXY = new Animated.ValueXY(initialJoystickLoc);\n  const thumb: Animated.ValueXY = new Animated.ValueXY(initialThumbLoc);\n  const character: Animated.ValueXY = new Animated.ValueXY(initialCharLoc);\n  character.addListener(({x, y}) => {\n    characterValueXY = {x, y};\n  });\n\n  const moveCharacter = () => {\n    const {dx, dy} = gesture.current;\n    const vx = getLimit(dx, charSpeed);\n    const vy = getLimit(dy, charSpeed);\n    const x = getBounds(characterValueXY.x + vx, width, charSize);\n    const y = getBounds(characterValueXY.y + vy, height, charSize);\n    Animated.spring(character, {\n      toValue: {x, y},\n      useNativeDriver,\n    }).start();\n  };\n\n  const moveThumb = () => {\n    const {dx, dy} = gesture.current;\n    const angle = Math.atan2(dx, dy);\n    const dz = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    const z = getLimit(dz, thumbSize);\n    const x = z * Math.sin(angle);\n    const y = z * Math.cos(angle);\n    Animated.spring(thumb, {\n      toValue: {x, y},\n      useNativeDriver,\n    }).start();\n  };\n\n  const moveJoystick = () => {\n    const {x0, y0} = gesture.current;\n    const offset = window.height - dimensions.height;\n    const offset2 = window.width - dimensions.width;\n    // TODO: handle joystick location better in landscape\n    const toValue = {\n      x: x0 - joystickCenter - offset2 / 2,\n      y: y0 - joystickCenter - offset / 2 - joystickSize / 1.5,\n    };\n    Animated.spring(joystick, {toValue, useNativeDriver}).start();\n  };\n\n  const resetJoystick = () => {\n    Animated.spring(joystick, {\n      toValue: initialJoystickLoc,\n      useNativeDriver,\n    }).start();\n    Animated.spring(thumb, {\n      toValue: initialThumbLoc,\n      useNativeDriver,\n    }).start();\n  };\n\n  const panGesture: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponderCapture: () => true,\n    onPanResponderStart: (_, g) => {\n      timer.current = true;\n      gesture.current = {x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy};\n      onUpdate();\n    },\n    onPanResponderMove: (_, g) => {\n      gesture.current = {x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy};\n    },\n    onPanResponderRelease: () => {\n      timer.current = false;\n    },\n  });\n\n  const onUpdate = () => {\n    interval.current = setInterval(() => {\n      if (!timer.current) {\n        if (interval.current) clearInterval(interval.current);\n\n        resetJoystick();\n        return;\n      }\n      moveJoystick();\n      moveCharacter();\n      moveThumb();\n    }, fps);\n  };\n\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\n    const layout = event.nativeEvent.layout;\n    setDimensions({width: layout.width, height: layout.height});\n  }, []);\n\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Archero\">\n      <View\n        onLayout={onLayout}\n        style={{flex: 1, backgroundColor: color.success}}\n        {...panGesture.panHandlers}>\n        <Animated.View\n          style={[\n            character.getLayout(),\n            {\n              width: charSize,\n              height: charSize,\n              backgroundColor: color.brand,\n            },\n          ]}\n        />\n        <Animated.View\n          style={[\n            joystick.getLayout(),\n            {\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: joystickSize,\n              height: joystickSize,\n              backgroundColor: color.overlay,\n            },\n          ]}>\n          <View\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: thumbSize,\n              height: thumbSize,\n              backgroundColor: color.overlay,\n            }}>\n            <Animated.View\n              style={[\n                thumb.getLayout(),\n                {\n                  borderRadius: 500,\n                  width: thumbSize,\n                  height: thumbSize,\n                  backgroundColor: colorWithOpacity(color.brand, 0.8),\n                },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </View>\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useEffect, useRef} from 'react';\nimport {Animated, View} from 'react-native';\nimport {Screen} from '../../../components';\nimport {useColor, useDriver} from '../../../hooks';\n\nconst Bird = () => {\n  const color = useColor();\n  return (\n    <Animated.View\n      style={{backgroundColor: color.warning, width: 50, height: 50}}\n    />\n  );\n};\n\nconst Pillar = () => {\n  const color = useColor();\n  const useNativeDriver = useDriver();\n  const location = useRef(new Animated.ValueXY({x: 0, y: 0}));\n  const state = useRef({x: 0, y: 0, direction: 1});\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const {y, direction} = state.current;\n      state.current.y = y + 1 * direction;\n      Animated.spring(location.current, {\n        toValue: state.current,\n        useNativeDriver,\n      }).start();\n    }, 20);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [useNativeDriver, location]);\n\n  const onPress = useCallback(() => {\n    state.current.direction = -1;\n  }, []);\n\n  return (\n    <Animated.View\n      onTouchStart={onPress}\n      style={[\n        location.current.getLayout(),\n        {backgroundColor: color.success, width: 50, height: 50},\n      ]}\n    />\n  );\n};\n\nexport const FlappyBird = memo(function FlappyBird() {\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Flappy Bird\">\n      <View style={{flex: 1, backgroundColor: color.surface}}>\n        <Bird />\n        <Pillar />\n      </View>\n    </Screen>\n  );\n});\n","export const arcadeScreens = [\n  'landing',\n  'archero',\n  'flappy-bird',\n  'papi-jump',\n  'snake',\n  'tic-tac-toe',\n] as const;\nexport type StackParams = {[key in typeof arcadeScreens[number]]: undefined};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Button} from 'react-native';\nimport {Screen} from '../../../components';\nimport {useAdminNavBack} from '../../../hooks';\nimport {arcadeScreens} from '../types';\n\nexport const Landing = memo(function Landing() {\n  const {navigate} = useNavigation();\n  const {onLeftPress} = useAdminNavBack();\n  const onPress = useCallback((screen: string) => () => navigate(screen), [\n    navigate,\n  ]);\n\n  return (\n    <Screen onLeftPress={onLeftPress} title=\"Arcade\">\n      {arcadeScreens.map(screen => (\n        <Button key={screen} onPress={onPress(screen)} title={screen} />\n      ))}\n    </Screen>\n  );\n});\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useEffect, useRef} from 'react';\nimport {Animated, Easing, StyleSheet, View} from 'react-native';\nimport {Screen} from '../../../components';\nimport {useColor, useDriver, useDropShadow} from '../../../hooks';\n\ntype PapiProps = {size: number; color: string};\n\nconst Papi = memo(function PapiMemo({size, color}: PapiProps) {\n  const dropShadow = useDropShadow();\n  const useNativeDriver = useDriver();\n  const location = useRef(new Animated.ValueXY({x: 0, y: 0})).current;\n\n  useEffect(() => {\n    const toValue = {x: 300, y: 600};\n    Animated.timing(location, {\n      toValue,\n      duration: 3000,\n      easing: Easing.bounce,\n      useNativeDriver,\n    }).start();\n  }, [location, useNativeDriver]);\n\n  return (\n    <Animated.View\n      style={[\n        location.getLayout(),\n        {\n          height: size,\n          width: size,\n          borderRadius: size,\n          backgroundColor: color,\n          ...dropShadow(10),\n        },\n      ]}\n    />\n  );\n});\n\nexport const PapiJump = memo(function PapiJump() {\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.surface,\n      flex: 1,\n    },\n  });\n  const navBack = useCallback(() => goBack(), [goBack]);\n  return (\n    <Screen onLeftPress={navBack} title=\"Papi Jump\">\n      <View style={styles.container}>\n        <Papi color={color.primary} size={50} />\n      </View>\n    </Screen>\n  );\n});\n","import React, {memo, useCallback} from 'react';\nimport {useNavigation} from '@react-navigation/native';\nimport {Screen} from '../../../components';\n\nexport const Snake = memo(function Snake() {\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n\n  return <Screen onLeftPress={navBack} title=\"Snake\" />;\n});\n","import {Board, BoardValue, Direction, PlayerTurn, State} from './types';\n\nconst dfs = (\n  m: Board,\n  d: Direction,\n  i: number,\n  j: number,\n  t: BoardValue,\n  c = 0,\n) => {\n  if (i < 0 || j < 0 || i >= m.length || j >= m[0].length || m[i][j] !== t)\n    return 0;\n  c++;\n  const val = Math.max(dfs(m, d, i + d[0], j + d[1], t, c), c);\n  return val;\n};\n\nexport const getWinner = (\n  board: Board,\n  i: number,\n  j: number,\n  boardSize: number,\n): BoardValue => {\n  const t = board[i][j];\n  const row = dfs(board, [0, -1], i, j, t) + dfs(board, [0, 1], i, j, t) - 1;\n  const col = dfs(board, [-1, 0], i, j, t) + dfs(board, [1, 0], i, j, t) - 1;\n  const dRow = dfs(board, [-1, -1], i, j, t) + dfs(board, [1, 1], i, j, t) - 1;\n  const dCol = dfs(board, [-1, 1], i, j, t) + dfs(board, [1, -1], i, j, t) - 1;\n  return Math.max(row, col, dRow, dCol) === boardSize ? t : 0;\n};\n\nexport const getValue = (n: number): string =>\n  n === 0 ? '' : n === 1 ? 'x' : 'o';\n\nexport const getNextValue = (turn: PlayerTurn): BoardValue =>\n  turn === 'white' ? 1 : -1;\n\nexport const getUpdatedBoard = (\n  board: Board,\n  i: number,\n  j: number,\n  v: BoardValue,\n): Board => {\n  const copy = [...board];\n  copy[i][j] = v;\n  return copy;\n};\n\nexport const getInitialState = (boardSize: number): State => {\n  const board: Board = [];\n  for (let i = 0; i < boardSize; i++) {\n    const row: BoardValue[] = [];\n    for (let j = 0; j < boardSize; j++) row.push(0);\n    board.push(row);\n  }\n  return {board, turn: 'white', state: 'playing', winner: null};\n};\n","import {useNavigation} from '@react-navigation/native';\nimport React, {memo, useCallback, useState} from 'react';\nimport {View} from 'react-native';\nimport {Button, Screen, Text} from '../../../components';\nimport {TouchableOpacity} from '../../../conversions';\nimport {useColor} from '../../../hooks';\nimport {getLandscapeOrientation, getSmallestDimension} from '../../../models';\nimport {useRootSelector} from '../../../utils';\nimport {State} from './types';\nimport {\n  getInitialState,\n  getNextValue,\n  getUpdatedBoard,\n  getValue,\n  getWinner,\n} from './utils';\n\nexport const TicTacToe = memo(function TicTacToe() {\n  const boardSize = 3;\n  const color = useColor();\n  const {goBack} = useNavigation();\n  const navBack = useCallback(() => goBack(), [goBack]);\n  const [game, setGame] = useState<State>(getInitialState(boardSize));\n  const smallest = useRootSelector(getSmallestDimension);\n  const landscape = useRootSelector(getLandscapeOrientation);\n  const size = smallest / (boardSize + 1);\n  const buttonTitle = game.state === 'game-over' ? 'new game' : 'reset';\n  const turnTitle = game.winner\n    ? `winner ${game.winner}`\n    : `${game.turn}'s move`;\n\n  const onButtonPress = useCallback(() => {\n    setGame(getInitialState(boardSize));\n  }, []);\n\n  const onCellPress = useCallback(\n    (i: number, j: number) => () => {\n      setGame(p => {\n        const nextValue = getNextValue(p.turn);\n        const updatedBoard = getUpdatedBoard(p.board, i, j, nextValue);\n        const didWin = getWinner(p.board, i, j, boardSize);\n        const winner = didWin === 1 ? 'white' : didWin === -1 ? 'black' : null;\n        return {\n          ...p,\n          board: updatedBoard,\n          turn: p.turn === 'white' ? 'black' : 'white',\n          state: didWin !== 0 ? 'game-over' : 'playing',\n          winner,\n        };\n      });\n    },\n    [],\n  );\n\n  return (\n    <Screen onLeftPress={navBack} title=\"Tic Tac Toe\">\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: color.surface,\n          flexDirection: landscape ? 'row' : 'column',\n        }}>\n        <View>\n          {game.board.map((row, i) => (\n            <View key={`row-${i}`} style={{flexDirection: 'row'}}>\n              {row.map((_, j) => (\n                <TouchableOpacity\n                  disabled={\n                    game.board[i][j] !== 0 || game.state === 'game-over'\n                  }\n                  key={`cell-${i}${j}`}\n                  onPress={onCellPress(i, j)}\n                  style={{\n                    width: size,\n                    height: size,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    backgroundColor: color.background,\n                    borderWidth: 2,\n                    borderColor: color.surface,\n                  }}>\n                  <Text title={getValue(game.board[i][j])} type=\"h4\" />\n                </TouchableOpacity>\n              ))}\n            </View>\n          ))}\n        </View>\n        <View style={{alignItems: 'center'}}>\n          <Text title={turnTitle} />\n          <Button onPress={onButtonPress} title={buttonTitle} />\n        </View>\n      </View>\n    </Screen>\n  );\n});\n","import {createStackNavigator} from '@react-navigation/stack';\nimport React, {memo} from 'react';\nimport {Archero} from './Archero';\nimport {FlappyBird} from './FlappyBird';\nimport {Landing} from './Landing';\nimport {PapiJump} from './PapiJump';\nimport {Snake} from './Snake';\nimport {TicTacToe} from './TicTacToe';\nimport {StackParams} from './types';\n\nconst noHeader = {headerShown: false};\nconst Stack = createStackNavigator<StackParams>();\n\nexport default memo(function Games() {\n  return (\n    <Stack.Navigator screenOptions={noHeader}>\n      <Stack.Screen component={Landing} name=\"landing\" />\n      <Stack.Screen component={FlappyBird} name=\"flappy-bird\" />\n      <Stack.Screen component={Snake} name=\"snake\" />\n      <Stack.Screen component={PapiJump} name=\"papi-jump\" />\n      <Stack.Screen component={Archero} name=\"archero\" />\n      <Stack.Screen component={TicTacToe} name=\"tic-tac-toe\" />\n    </Stack.Navigator>\n  );\n});\n"],"sourceRoot":""}